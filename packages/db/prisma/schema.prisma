generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PaymentState {
  PENDING
  SUCCESS
  FAILED
}

enum SeatStatus {
  AVAILABLE
  BOOKED
}

model User {
  id       String    @id @default(uuid())
  number   String    @unique
  name     String
  email    String    @unique
  verified Boolean   @default(false)
  role     Role      @default(USER)
  bookings Booking[]
  payments Payment[]
}

model Admin {
  id       String  @id @default(uuid())
  number   String  @unique
  name     String
  email    String  @unique
  verified Boolean @default(false)
  role     Role    @default(ADMIN)
  events   Event[]
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String
  banner      String
  adminId     String
  admin       Admin     @relation(fields: [adminId], references: [id])
  bookings    Booking[]
  payments    Payment[]
}

model Booking {
  id      String @id @default(uuid())
  eventId String
  userId  String
  seats   Seat[]
  event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model SeatType {
  id          String @id @default(uuid())
  name        String
  event       String
  price       Int
  description String
  seat        Seat[]
}

model Seat {
  id         String     @id @default(uuid())
  status     SeatStatus @default(AVAILABLE)
  booking    Booking?   @relation(fields: [bookingId], references: [id])
  bookingId  String?
  type       SeatType   @relation(fields: [seatTypeId], references: [id])
  seatTypeId String
}

model Payment {
  id      String       @id @default(uuid())
  eventId String
  userId  String
  status  PaymentState @default(PENDING)
  event   Event        @relation(fields: [eventId], references: [id])
  user    User         @relation(fields: [userId], references: [id])
}
